{"ast":null,"code":"var _jsxFileName = \"/Users/brenfife/Desktop/savings-lotto/app/components/MyComponent.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { AccountData, ContractData, ContractForm } from \"@drizzle/react-components\";\nexport default (({\n  accounts\n}) => __jsx(\"div\", {\n  className: \"App\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, __jsx(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Drizzle Examples\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"Examples of how to get started with Drizzle in various situations.\")), __jsx(\"div\", {\n  className: \"section\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, __jsx(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, \"Active Account\"), __jsx(AccountData, {\n  accountIndex: 0,\n  units: \"ether\",\n  precision: 3,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n})), __jsx(\"div\", {\n  className: \"section\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, __jsx(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, \"SimpleStorage\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, \"This shows a simple ContractData component with no arguments, along with a form to set its value.\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, __jsx(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, \"Stored Value: \"), __jsx(ContractData, {\n  contract: \"SimpleStorage\",\n  method: \"storedData\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n})), __jsx(ContractForm, {\n  contract: \"SimpleStorage\",\n  method: \"set\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n})), __jsx(\"div\", {\n  className: \"section\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, __jsx(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, \"TutorialToken\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, \"Here we have a form with custom, friendly labels. Also note the token symbol will not display a loading indicator. We've suppressed it with the \", __jsx(\"code\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, \"hideIndicator\"), \" prop because we know this variable is constant.\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}, __jsx(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, \"Total Supply: \"), __jsx(ContractData, {\n  contract: \"TutorialToken\",\n  method: \"totalSupply\",\n  methodArgs: [{\n    from: accounts[0]\n  }],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}), \" \", __jsx(ContractData, {\n  contract: \"TutorialToken\",\n  method: \"symbol\",\n  hideIndicator: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}, __jsx(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, \"My Balance: \"), __jsx(ContractData, {\n  contract: \"TutorialToken\",\n  method: \"balanceOf\",\n  methodArgs: [accounts[0]],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n})), __jsx(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, \"Send Tokens\"), __jsx(ContractForm, {\n  contract: \"TutorialToken\",\n  method: \"transfer\",\n  labels: [\"To Address\", \"Amount to Send\"],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n})), __jsx(\"div\", {\n  className: \"section\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}, __jsx(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}, \"ComplexStorage\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, \"Finally this contract shows data types with additional considerations. Note in the code the strings below are converted from bytes to UTF-8 strings and the device data struct is iterated as a list.\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n}, __jsx(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 74\n  },\n  __self: this\n}, \"String 1: \"), __jsx(ContractData, {\n  contract: \"ComplexStorage\",\n  method: \"string1\",\n  toUtf8: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n})), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}, __jsx(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78\n  },\n  __self: this\n}, \"String 2: \"), __jsx(ContractData, {\n  contract: \"ComplexStorage\",\n  method: \"string2\",\n  toUtf8: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n})), __jsx(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n}, \"Single Device Data: \"), __jsx(ContractData, {\n  contract: \"ComplexStorage\",\n  method: \"singleDD\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}))));","map":{"version":3,"sources":["/Users/brenfife/Desktop/savings-lotto/app/components/MyComponent.js"],"names":["React","AccountData","ContractData","ContractForm","accounts","from"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  AccountData,\n  ContractData,\n  ContractForm,\n} from \"@drizzle/react-components\";\n\n\nexport default ({ accounts }) => (\n  <div className=\"App\">\n    <div>\n      <h1>Drizzle Examples</h1>\n      <p>Examples of how to get started with Drizzle in various situations.</p>\n    </div>\n\n    <div className=\"section\">\n      <h2>Active Account</h2>\n      <AccountData accountIndex={0} units=\"ether\" precision={3} />\n    </div>\n\n    <div className=\"section\">\n      <h2>SimpleStorage</h2>\n      <p>\n        This shows a simple ContractData component with no arguments, along with\n        a form to set its value.\n      </p>\n      <p>\n        <strong>Stored Value: </strong>\n        <ContractData contract=\"SimpleStorage\" method=\"storedData\" />\n      </p>\n      <ContractForm contract=\"SimpleStorage\" method=\"set\" />\n    </div>\n\n    <div className=\"section\">\n      <h2>TutorialToken</h2>\n      <p>\n        Here we have a form with custom, friendly labels. Also note the token\n        symbol will not display a loading indicator. We've suppressed it with\n        the <code>hideIndicator</code> prop because we know this variable is\n        constant.\n      </p>\n      <p>\n        <strong>Total Supply: </strong>\n        <ContractData\n          contract=\"TutorialToken\"\n          method=\"totalSupply\"\n          methodArgs={[{ from: accounts[0] }]}\n        />{\" \"}\n        <ContractData contract=\"TutorialToken\" method=\"symbol\" hideIndicator />\n      </p>\n      <p>\n        <strong>My Balance: </strong>\n        <ContractData\n          contract=\"TutorialToken\"\n          method=\"balanceOf\"\n          methodArgs={[accounts[0]]}\n        />\n      </p>\n      <h3>Send Tokens</h3>\n      <ContractForm\n        contract=\"TutorialToken\"\n        method=\"transfer\"\n        labels={[\"To Address\", \"Amount to Send\"]}\n      />\n    </div>\n    <div className=\"section\">\n      <h2>ComplexStorage</h2>\n      <p>\n        Finally this contract shows data types with additional considerations.\n        Note in the code the strings below are converted from bytes to UTF-8\n        strings and the device data struct is iterated as a list.\n      </p>\n      <p>\n        <strong>String 1: </strong>\n        <ContractData contract=\"ComplexStorage\" method=\"string1\" toUtf8 />\n      </p>\n      <p>\n        <strong>String 2: </strong>\n        <ContractData contract=\"ComplexStorage\" method=\"string2\" toUtf8 />\n      </p>\n      <strong>Single Device Data: </strong>\n      <ContractData contract=\"ComplexStorage\" method=\"singleDD\" />\n    </div>\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}